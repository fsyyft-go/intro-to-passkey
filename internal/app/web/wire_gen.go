// Copyright 2025 fsyyft-go
//
// Licensed under the MIT License. See LICENSE file in the project root for full license information.

// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package web

import (
	appbiz "github.com/fsyyft-go/intro-to-passkey/internal/biz"
	appconf "github.com/fsyyft-go/intro-to-passkey/internal/conf"
	appdata "github.com/fsyyft-go/intro-to-passkey/internal/data"
	applog "github.com/fsyyft-go/intro-to-passkey/internal/log"
	appserver "github.com/fsyyft-go/intro-to-passkey/internal/server"
	appservice "github.com/fsyyft-go/intro-to-passkey/internal/service"
)

// Injectors from wire.go:

// wireWeb 是 Wire 框架的注入器函数，用于构建完整的 Web 服务实例。
// 该函数通过 Wire 工具在编译时生成具体的依赖注入代码。
//
// 参数：
//   - conf: 应用程序配置对象
//
// 返回：
//   - appserver.WebServer: 完整配置的 Web 服务实例
//   - func(): 清理函数，用于释放资源
//   - error: 初始化过程中的错误信息
func wireWeb(conf *appconf.Config) (appserver.WebServer, func(), error) {
	logger, cleanup, err := applog.NewLogger(conf)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup2, err := appdata.NewData(logger, conf)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	greeterRepo := appdata.NewGreeterRepo(logger, conf, dataData)
	greeterUsecase := appbiz.NewGreeterUsecase(logger, conf, greeterRepo)
	greeterHTTPServer := appservice.NewGreeterService(logger, conf, greeterUsecase)
	userHTTPServer := appservice.NewUserService(logger, conf)
	webServer, cleanup3, err := appserver.NewWebServer(logger, conf, greeterHTTPServer, userHTTPServer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return webServer, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
